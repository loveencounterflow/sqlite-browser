{
  "version": 3,
  "file": "select.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/select.test.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,EAAA,GAA4B,IAAI,CAAC,UAhBjC;;;EAkBA,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,OAAR,EAnB5B;;;;;EAwBA,IAAG,CAAA,gBAAA,CAAH,GAAwB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAA,mBAAA,GAAsB,CACpB,CAAC,CAAE,IAAF,EAAQ,SAAR,CAAD,EAAqB,KAArB,CADoB,EAEpB,CAAC,CAAE,GAAF,EAAO,SAAP,CAAD,EAAoB,KAApB,CAFoB,EAAtB;;IAKA,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AAC3D,cAAA,CAAA,EAAA;UAAA,CAAE,CAAF,EAAK,QAAL,CAAA,GAAmB;AACnB;YACE,OAAA,CAAQ,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,QAAb,CAAR,EADF;WAAA,cAAA;YAEM;AACJ,mBAAO,OAAA,CAAQ,KAAK,CAAC,OAAd,EAHT;;AAIA,iBAAO;QANoD,CAAZ;MAAV,CAAjC;IADR;IAQA,IAAA,CAAA;AACA,WAAO;EAfe,EAxBxB;;;EA8CA,IAAO,qBAAP;IACE,IAAA,CAAK,IAAL,EADF;;;EA9CA;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nL                         = require '../select'\nPD                        = require '../..'\n# { $, $async, }            = PD\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_to be written\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[ null, '^number',],false]\n    [[ 123, '^number',],false]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ d, selector, ] = probe\n      try\n        resolve PD.select d, selector\n      catch error\n        return resolve error.message\n      return null\n  done()\n  return null\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"selector keypatterns\" ]\n  # test @[ \"select 2\" ]\n\n\n"
  ]
}